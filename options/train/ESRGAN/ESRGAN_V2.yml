# general settings
name: ESRGAN_V2_VGGDiscriminator
model_type: ESRGANModel_V2
scale: 5 # 5배 업스케일링
num_gpu: 1  # set num_gpu: 0 for cpu mode
manual_seed: 0

# dataset and data loader settings
datasets:
  train:
    name: CustomDataset
    type: NumpyPairedDataset # 사용자 정의 데이터셋 클래스 이름
    dataroot_gt: /home/wj/works/Wind_Speed_Data/new_data/HR/train_hr.npy # HR 데이터 경로
    dataroot_lq: /home/wj/works/Wind_Speed_Data/new_data/LR/train_lr.npy # LR 데이터 경로
    filename_tmpl: '{}'
    io_backend:
      type: numpy # numpy 배열을 사용
    gt_size: 100 # HR 데이터 크기
    use_hflip: false # 데이터 증강: 수평 뒤집기
    use_rot: false # 데이터 증강: 회전

    # data loader
    num_worker_per_gpu: 8  # ✅ 성능 최적화
    batch_size_per_gpu: 32  # ✅ 메모리 안정성을 고려하여 32 → 24로 조정
    dataset_enlarge_ratio: 1 #데이터 증강 없이 그대로 사용
    prefetch_mode: ~

  val:
    name: CustomValDataset
    type: NumpyPairedDataset # 검증 데이터셋도 같은 구조 사용
    dataroot_gt: /home/wj/works/Wind_Speed_Data/new_data/HR/val_hr.npy
    dataroot_lq: /home/wj/works/Wind_Speed_Data/new_data/LR/val_lr.npy
    io_backend:
      type: numpy

# network structures
network_g:
  type: RRDBNet
  num_in_ch: 1 # 입력 데이터는 1채널 (2D 그리드 데이터)
  num_out_ch: 1 # 출력 채널도 1채널 (HR 그리드 데이터)
  num_feat: 64 # 특징 맵 개수
  num_block: 23 # RRDB 블록 개수 23->16

network_d:
  type: VGGStyleDiscriminator
  num_in_ch: 1 # Discriminator도 1채널 데이터 입력
  num_feat: 64

# path
path:
  experiments_root: experiments/ESRGAN_x5_wind_speed  # 명시적으로 지정한 experiments_root
  pretrain_network_g: ~ # 사전 학습된 모델이 없는 경우
  strict_load_g: true
  resume_state: ~ # 학습 상태를 처음부터 시작

# training settingshttps://chatgpt.com/c/67c7f0d2-0c2c-8001-9ccd-99184f5b4504
train:
  ema_decay: 0.999
  optim_g:
    type: Adam
    lr: !!float 1e-4
    weight_decay: 0
    betas: [0.9, 0.99]
  optim_d:
    type: Adam
    lr: !!float 1e-4
    weight_decay: 0
    betas: [0.9, 0.99]

  scheduler:
    type: MultiStepLR
    milestones: [43750, 65625, 78750]  # 50%, 75%, 90%
    gamma: 0.7  # ✅ 기존 0.5 → 0.7 (학습률 감소를 완화)

  total_iter: 87500
  warmup_iter: -1  # no warm up

  # losses
  pixel_opt:
    type: CharbonnierLoss
    loss_weight: !!float 5e-3  # ✅ 픽셀 기반 손실 줄임 (다른 손실과 균형 맞춤)
  ssl_opt:
    type: SelfSimilarityLoss
    patch_size: 8  # 패치 크기 설정
    loss_weight: !!float 5e-3  # ✅ 자기 유사성 손실 가중치 (이전 GLCM 가중치와 유사)
  wavelet_opt:
    type: WaveletHighFrequencyLoss
    loss_weight: !!float 2e-3  # ✅ 고주파 손실 감소 (노이즈 방지)
  gan_opt:
    type: GANLoss
    gan_type: vanilla
    real_label_val: 1.0
    fake_label_val: 0.0
    loss_weight: !!float 1e-2  # ✅ GAN 가중치 증가 (더 현실적인 텍스처 유도)

  net_d_iters: 1
  net_d_init_iters: 0

# validation settings
val:
  val_freq: !!float 3.5e3  # 1 epoch마다 검증
  save_img: true

  metrics:
    rmse: # metric name, can be arbitrary
      type: calculate_rmse
      crop_border: 0
      test_y_channel: false

# logging settings
logger:
  print_freq: 100
  save_checkpoint_freq: !!float 3.5e3  # 1 epoch마다 검증
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500
